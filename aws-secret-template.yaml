AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AWS Secrets Manager secret with a Lambda rotation function. Secret stores a single key-value pair.
  Key name is user-defined; value is randomized with each rotation.

Parameters:
  SecretAliasName:
    Type: String
    Default: "auth-validator"
    Description: Alias name for the secret

  KeyName:
    Type: String
    Default: "X-Auth-Validator"
    Description: The JSON key to use in the secret

  SecretLength:
    Type: Number
    Default: 64
    Description: Length of generated value

  RotationScheduleExpression:
    Type: String
    Default: "rate(4 hours)"
    Description: Schedule expression for rotation (e.g., rate(4 hour), cron(...))

  ValidatorUsername:
    Type: String
    Default: "validator"

  CreateUser:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

Conditions:
  CreateUserCondition:
    Fn::Equals: [!Ref CreateUser, "true"]

Resources:
  SecretKey:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Name: !Ref SecretAliasName
      Description: Secret with scheduled Lambda rotation
      SecretString: !Sub |-
        {
          "${KeyName}": "PLACEHOLDER"
        }

  SecretRotationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "RotationLambdaRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RotationLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:UpdateSecretVersionStage
                Resource: !Ref SecretKey

  RotationLambdaInvokePolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RotationLambdaFunction
      Principal: secretsmanager.amazonaws.com
      SourceArn: !Ref SecretKey

  EnableRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Ref SecretKey
      RotationLambdaARN: !GetAtt RotationLambdaFunction.Arn
      RotationRules:
        ScheduleExpression: !Ref RotationScheduleExpression

  SecretPermissions:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref SecretKey
      ResourcePolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:PutSecretValue
              - secretsmanager:DescribeSecret
              - secretsmanager:UpdateSecretVersionStage
            Resource: "*"
            Condition:
              StringEquals:
                aws:SourceArn: !GetAtt RotationLambdaFunction.Arn
          - Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:user/${ValidatorUsername}
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Resource: !Ref SecretKey

  RotationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-RotationLambda"
      Handler: index.lambda_handler
      Role: !GetAtt SecretRotationLambdaRole.Arn
      Runtime: python3.13
      Timeout: 30
      LoggingConfig:
        LogFormat: JSON
      Environment:
        Variables:
          SECRET_LENGTH: !Ref SecretLength
          SECRET_KEY: !Ref KeyName
      Code:
        ZipFile: |
          from typing import Any
          import boto3
          import logging
          import os
          import json
          import secrets
          import string
          from botocore.exceptions import ClientError
          from botocore.config import Config

          logger = logging.getLogger()

          boto_config = Config(retries={"max_attempts": 3, "mode": "standard"})
          secretsmanager_client = boto3.client("secretsmanager", config=boto_config)

          SECRET_LENGTH = int(os.environ.get("SECRET_LENGTH", "64"))
          SECRET_KEY = os.environ.get("SECRET_KEY", "X-Auth-Validator")


          def lambda_handler(event: dict[str, Any], context) -> None:
              logger.info(f"Received event: {json.dumps(event)}")
              validate_event(event)

              arn = event["SecretId"]
              token = event["ClientRequestToken"]
              step = event["Step"]

              metadata = describe_secret(arn)
              validate_secret_rotation(metadata, arn, token)

              step_function_mapping = {
                  "createSecret": create_secret,
                  "setSecret": set_secret,
                  "testSecret": test_secret,
                  "finishSecret": finish_secret,
              }

              if step not in step_function_mapping:
                  logger.error(f"Invalid step parameter: {step}")
                  raise ValueError(f"Invalid step parameter: {step}")

              try:
                  step_function_mapping[step](arn, token)
              except Exception as e:
                  logger.error(f"Error during step '{step}' for secret {arn}: {e}")
                  raise


          def validate_event(event: dict[str, Any]) -> None:
              required_keys = ["SecretId", "ClientRequestToken", "Step"]
              for key in required_keys:
                  if key not in event:
                      logger.error(f"Missing required key '{key}' in event.")
                      raise ValueError(f"Missing required key '{key}' in event.")


          def describe_secret(arn: str) -> dict[str, Any]:
              try:
                  response = secretsmanager_client.describe_secret(SecretId=arn)
                  logger.info(f"Described secret for ARN {arn}.")
                  return response  # type: ignore
              except ClientError as e:
                  logger.error(f"Failed to describe secret for ARN {arn}: {e}")
                  raise


          def validate_secret_rotation(metadata: dict[str, Any], arn: str, token: str) -> None:
              if not metadata.get("RotationEnabled"):
                  logger.error(f"Secret {arn} is not enabled for rotation.")
                  raise ValueError(f"Secret {arn} is not enabled for rotation.")

              versions = metadata.get("VersionIdsToStages", {})
              if token not in versions:
                  logger.error(f"Secret version {token} is missing for secret {arn}.")
                  raise ValueError(f"Secret version {token} is missing for secret {arn}.")

              if "AWSCURRENT" in versions[token]:
                  logger.info(f"Secret version {token} is already AWSCURRENT for secret {arn}.")
                  return

              if "AWSPENDING" not in versions[token]:
                  logger.error(f"Secret version {token} is not AWSPENDING for secret {arn}.")
                  raise ValueError(f"Secret version {token} is not AWSPENDING for secret {arn}.")


          def get_secret_value(arn: str, stage="AWSCURRENT") -> dict[str, Any]:
              try:
                  response = secretsmanager_client.get_secret_value(
                      SecretId=arn, VersionStage=stage
                  )
                  logger.info(f"Retrieved secret for ARN {arn} at stage {stage}.")
                  return json.loads(response["SecretString"])
              except secretsmanager_client.exceptions.ResourceNotFoundException:
                  logger.warning(f"Secret not found for ARN {arn} at stage {stage}.")
                  raise
              except ClientError as e:
                  logger.error(f"Failed to retrieve secret for ARN {arn} at stage {stage}: {e}")
                  raise


          def put_secret_value(
              arn: str, token: str, secret_value: dict[str, Any], stage="AWSPENDING"
          ) -> None:
              try:
                  secretsmanager_client.put_secret_value(
                      SecretId=arn,
                      ClientRequestToken=token,
                      SecretString=json.dumps(secret_value),
                      VersionStages=[stage],
                  )
                  logger.info(f"Stored secret for ARN {arn} at stage {stage} with token {token}.")
              except ClientError as e:
                  logger.error(f"Failed to store secret for ARN {arn} at stage {stage}: {e}")
                  raise


          def generate_secret(pw_len: int) -> str:
              letters_and_digits = string.ascii_letters + string.digits
              # Include only safe special characters, excluding ones commonly needing escaping
              safe_special_chars = '!@#$%^&*()_+-={}[]|:;<>,.?~'
              charset = letters_and_digits + safe_special_chars
              return "".join(secrets.choice(charset) for _ in range(pw_len))


          def create_secret(arn: str, token: str) -> None:
              current_secret = get_secret_value(arn, stage="AWSCURRENT")

              try:
                  get_secret_value(arn, stage="AWSPENDING")
                  logger.info(f"AWSPENDING version already exists for secret {arn}.")
                  return
              except secretsmanager_client.exceptions.ResourceNotFoundException:
                  pass

              new_secret = generate_secret(SECRET_LENGTH)
              updated_secret = current_secret.copy()
              updated_secret[SECRET_KEY] = new_secret

              put_secret_value(arn, token, updated_secret)


          def set_secret(arn: str, token: str) -> None:
              try:
                  current_secret = get_secret_value(arn, stage="AWSCURRENT")
                  pending_secret = get_secret_value(arn, stage="AWSPENDING")
                  logger.info(f"Successfully set pending secret for {arn}")
              except ClientError as e:
                  logger.error(f"Failed to set pending secret due to Secrets Manager error: {e}")
                  raise
              except Exception as e:
                  logger.error(f"Failed to set pending secret in target system: {e}")
                  raise


          def test_secret(arn: str, token: str) -> None:
              try:
                  pending_secret = get_secret_value(arn, stage="AWSPENDING")
                  logger.info(f"Successfully tested pending secret for {arn}")
              except ClientError as e:
                  logger.error(f"Failed to retrieve pending secret for testing: {e}")
                  raise
              except Exception as e:
                  logger.error(f"Failed to validate pending secret against target system: {e}")
                  raise


          def finish_secret(arn: str, token: str) -> None:
              secret_metadata = describe_secret(arn)
              current_secret = get_secret_value(arn, stage="AWSCURRENT")
              current_version = ""
              for version in secret_metadata["VersionIdsToStages"]:
                  if "AWSCURRENT" in secret_metadata["VersionIdsToStages"][version]:
                      if version == token:
                          logger.info(f"Version {version} already marked as AWSCURRENT for {arn}")
                          return
                      current_version = version

              secretsmanager_client.update_secret_version_stage(
                  SecretId=arn,
                  VersionStage="AWSCURRENT",
                  MoveToVersionId=token,
                  RemoveFromVersionId=current_version,
              )
              logger.info(f"Marked version {token} as AWSCURRENT for secret {arn}.")
              logger.info(f"Completed secret rotation for {arn}.")

  ValidatorUser:
    Type: AWS::IAM::User
    Condition: CreateUserCondition
    Properties:
      UserName: !Ref ValidatorUsername
      Policies:
        - PolicyName: SecretAccessRead
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Ref SecretKey

  ValidatorUserAccessKey:
    Type: AWS::IAM::AccessKey
    Condition: CreateUserCondition
    Properties:
      UserName: !Ref ValidatorUser

Outputs:
  ValidatorUserAccessKey:
    Description: The access key ID for the validator user
    Value: !Ref ValidatorUserAccessKey
    Condition: CreateUserCondition

  ValidatorUserSecretKey:
    Description: The secret access key for the validator user
    Value: !GetAtt ValidatorUserAccessKey.SecretAccessKey
    Condition: CreateUserCondition
