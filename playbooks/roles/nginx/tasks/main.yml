---
- name: Create NGINX Plus log directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: "0755"
  with_items:
    - "{{ nginx_log_dir }}"
    - "{{ nginx_app_protect_log_dir }}"
  when: nginx_plus | bool

- name: Ensure NGINX log directory is owned by nginx user
  ansible.builtin.file:
    path: "{{ nginx_log_dir | default('/var/log/nginx') }}"
    state: directory
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: "0755"

- name: Create pid directory for nginx
  ansible.builtin.file:
    path: "{{ nginx_pid_dir }}"
    state: directory
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: "0755"

- name: Create certificate directory
  ansible.builtin.file:
    path: "{{ nginx_cert_dir }}"
    state: directory
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: "0755"

- name: Create server certificate directory
  ansible.builtin.file:
    path: "{{ nginx_cert_dir }}/server"
    state: directory
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: "0755"

- name: Copy general NGINX configuration
  ansible.builtin.template:
    src: nginx.j2
    dest: /etc/nginx/nginx.conf
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: "0644"
  notify: "restart nginx service"

- name: Copy NGINX server block configuration
  ansible.builtin.template:
    src: nginx_auth_validator.j2
    dest: "/etc/nginx/conf.d/{{ server_name }}.conf"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: "0644"
  vars:
    jinja2_native: true  # Ensure native Jinja2 syntax is used
  notify: "restart nginx service"

# Block: Generate self-signed certificates
- block:
  when: create_self_signed_cert == "true"
    - name: Generate Root CA key
      ansible.builtin.command: openssl genrsa -out {{ nginx_cert_dir }}/rootCA.key 2048
      args:
        creates: "{{ nginx_cert_dir }}/rootCA.key"
      register: root_ca_key_result

    - name: Generate Root CA certificate
      ansible.builtin.command: >
        openssl req -x509 -new -nodes -key {{ nginx_cert_dir }}/rootCA.key
        -sha256 -days 1024
        -out {{ nginx_cert_dir }}/rootCA.pem
        -subj "/C=US/ST=California/L=San Francisco/O=My Company/OU=IT Department/CN={{ environment | capitalize }} Root CA"
      args:
        creates: "{{ nginx_cert_dir }}/rootCA.pem"
      register: root_ca_cert_result

    - name: Generate server private key
      ansible.builtin.command: openssl genrsa -out {{ nginx_cert_dir }}/server/{{ server_name }}-nginx.key 2048
      args:
        creates: "{{ nginx_cert_dir }}/server/{{ server_name }}-nginx.key"
      register: server_key_result

    - name: Generate server certificate signing request (CSR)
      ansible.builtin.command: >
        openssl req -new -key {{ nginx_cert_dir }}/server/{{ server_name }}-nginx.key
        -out {{ nginx_cert_dir }}/server/{{ server_name }}-nginx.csr
        -subj "/C=US/ST=California/L=San Francisco/O=My Company/OU=IT Department/CN={{ server_name }}"
      args:
        creates: "{{ nginx_cert_dir }}/server/{{ server_name }}-nginx.csr"

    - name: Generate server certificate signed by Root CA
      ansible.builtin.command: >
        openssl x509 -req -in {{ nginx_cert_dir }}/server/{{ server_name }}-nginx.csr
        -CA {{ nginx_cert_dir }}/rootCA.pem -CAkey {{ nginx_cert_dir }}/rootCA.key
        -CAcreateserial -out {{ nginx_cert_dir }}/server/{{ server_name }}-fullchain.crt
        -days 500 -sha256
      args:
        creates: "{{ nginx_cert_dir }}/server/{{ server_name }}-fullchain.crt"

# Block: Copy existing certificates
- block:
  when: create_self_signed_cert != "true"
    - name: Copy existing SSL certificate if not generating self-signed
      ansible.builtin.copy:
        src: "ssl/{{ server_certificate_chain }}"
        dest: "{{ nginx_cert_dir }}/server/{{ server_name }}-fullchain.crt"
        owner: "{{ nginx_user }}"
        group: "{{ nginx_group }}"
        mode: "0644"
      register: copy_cert_result

    - name: Copy existing SSL private key if not generating self-signed
      ansible.builtin.copy:
        src: "ssl/{{ server_certificate_key }}"
        dest: "{{ nginx_cert_dir }}/server/{{ server_name }}-nginx.key"
        owner: "{{ nginx_user }}"
        group: "{{ nginx_group }}"
        mode: "0600"
      register: copy_key_result

- name: Set permissions and ownership for SSL certificate files
  ansible.builtin.find:
    paths: "{{ nginx_cert_dir }}"
    recurse: true
    file_type: file
    excludes:
      - "*.key"
  register: cert_files

- name: Apply correct permissions to SSL certificate files
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: "0644"
  with_items: "{{ cert_files.files }}"
  register: cert_files_perm_result

- name: Set restrictive permissions for private key files
  ansible.builtin.find:
    paths: "{{ nginx_cert_dir }}"
    patterns: "*.key"
    recurse: true
  register: key_files

- name: Apply restrictive permissions to private key files
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: "0600"
  with_items: "{{ key_files.files }}"
  register: key_files_perm_result

- name: Create systemd override directory for nginx
  ansible.builtin.file:
    path: /etc/systemd/system/nginx.service.d
    state: directory
    mode: "0755"

- name: Create systemd override file for nginx
  ansible.builtin.template:
    src: nginx_override.j2
    dest: /etc/systemd/system/nginx.service.d/override.conf
    mode: "0644"

- name: Copy App Protect policy file
  ansible.builtin.copy:
    src: app-protect-policy.json
    dest: "/etc/app_protect/conf/app-protect-policy.json"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: "0644"
  when: nginx_plus | bool

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true

- name: Start and enable NGINX service
  ansible.builtin.systemd:
    name: nginx
    state: started
    enabled: true

# Check if any certificate-related task made changes and restart NGINX if needed
- name: Check certificate changes and notify handler
  ansible.builtin.debug:
    msg: "Certificate changes detected, restarting NGINX service"
  vars:
    cert_changes: >
      {{
        (root_ca_key_result is defined and root_ca_key_result.changed) or
        (root_ca_cert_result is defined and root_ca_cert_result.changed) or
        (server_key_result is defined and server_key_result.changed) or
        (copy_cert_result is defined and copy_cert_result.changed) or
        (copy_key_result is defined and copy_key_result.changed) or
        cert_files_perm_result.changed | default(false) or
        key_files_perm_result.changed | default(false)
      }}
  when: cert_changes | bool
  notify: "restart nginx service"
